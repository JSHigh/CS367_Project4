/*******************************************************************************
File			Questions.txt

Author1:			Justin High
				high
Author2:			Aaron Gordner
				gordner

Completion Date:  11/29/2016

Course:           CS 367, Fall 2016 
*******************************************************************************/
Directions: answer the following seven (7) questions.  Note: some of the 
questions may require you to know how the LinkedList class is implemented; in 
these cases, you should assume that it is implemented as a doubly-linked chain
of nodes with references to the head and the tail.

1) The value tested by TestHash are Integer.  For an Integer storing value k, 
what is the hashCode() returned?  By trying a few values you can quickly figure 
out what it does.  

Answer: For an integer, the hashcode is the integer value.


2) Suppose you insert an item into your hashtable and then immediately do a 
lookup on that item.  What is the worst-case complexity of your program in this
situation?  Briefly explain your answer.

Answer: Worst-case complexity is a function of the hash method (should be O(1)),
 position lookup (O(1)), and adding the new value to the array. Adding a new 
 value to the end of the linked list is O(1) with a tail reference. If an array
 expansion is needed due to load factor or chain length, that is O(N). Overall,
 worst-case is O(N).



3) What is the worst-case complexity of your dump() method?  Briefly explain
your answer, making sure to identify the problem size(s).

Answer: Worst-case complexity of the dump() method is O(N), where N is the
 number of values in the hashtable. Regardless of the number of chains and
 average (or max) chain length, every value must be visited. This could be
 improved if there was accounting for duplicate values in a single linked
 list.


4) In this question you will run TestHash four times using the parameters 
indicated in the table:
    run1        439 323232 10.0 60 0 filename
    run2        439 323232 10.0 61 0 filename
    run3        439 323232 10.0 60 0 filename
    run4        439 323232 10.0 61 0 filename
where filename can be any file you want.  
- For run1 and run2 you will use the TestHash program as written.  
- For run3 and run4 you will modify the TestHash program so that instead of 
  inserting random integers into the hashtable, it will insert the numbers 
  0, 3, 6, 9, 12, ...
  The easiest way to do this is to replace the line:
      table.insert(new Integer(randGen.nextInt()));
  with the line:
      table.insert(new Integer(3*k)); 

What are the hashtable statistics for each of the runs?  

Answer:
Run1
Hashtable statistics: 
  current table size: 60
  # items in table: 439
  current load factor: 7.316666666666666
  longest chain length: 14
  # 0-length chains: 0
  avg (non=0) chain length: 7.316666666666666
  
Run2
Hashtable statistics: 
  current table size: 61
  # items in table: 439
  current load factor: 7.19672131147541
  longest chain length: 14
  # 0-length chains: 0
  avg (non=0) chain length: 7.19672131147541

Run3
Hashtable statistics: 
  current table size: 60
  # items in table: 439
  current load factor: 7.316666666666666
  longest chain length: 22
  # 0-length chains: 40
  avg (non=0) chain length: 21.95

Run4
Hashtable statistics: 
  current table size: 61
  # items in table: 439
  current load factor: 7.19672131147541
  longest chain length: 8
  # 0-length chains: 0
  avg (non=0) chain length: 7.19672131147541


5) In this question you will again run TestHash four times, this time using the 
parameters:
    run5        439 323232 0.8 60 0 filename
    run6        439 323232 0.8 61 0 filename
    run7        439 323232 0.8 60 0 filename
    run8        439 323232 0.8 61 0 filename
where filename can be any file you want.  
- For run5 and run6 you will use the TestHash program as written.  
- For run7 and run8 you will modify the TestHash program so that instead of
  inserting random integers into the hashtable, it will insert the numbers 
  0, 3, 6, 9, 12, ...
  The easiest way to do this is to replace the line:
      table.insert(new Integer(randGen.nextInt()));
  with the line:
      table.insert(new Integer(3*k)); 

What are the hashtable statistics for each of the runs?  

Answer:
Run5
Hashtable statistics: 
  current table size: 975
  # items in table: 439
  current load factor: 0.4502564102564103
  longest chain length: 4
  # 0-length chains: 616
  avg (non=0) chain length: 1.222841225626741

Run6
Hashtable statistics: 
  current table size: 991
  # items in table: 439
  current load factor: 0.4429868819374369
  longest chain length: 4
  # 0-length chains: 638
  avg (non=0) chain length: 1.2407932011331444

Run7
Hashtable statistics: 
  current table size: 975
  # items in table: 439
  current load factor: 0.4502564102564103
  longest chain length: 2
  # 0-length chains: 650
  avg (non=0) chain length: 1.3507692307692307

Run8
Hashtable statistics: 
  current table size: 991
  # items in table: 439
  current load factor: 0.4429868819374369
  longest chain length: 1
  # 0-length chains: 553
  avg (non=0) chain length: 1.0


6) In this question you will again run TestHash four times, this time using the 
parameters:
    run9        439 323232 10.0 11 0 filename
    run10       439 323232 10.0 11 5 filename
    run11       439 323232 0.8 11 0 filename
    run12       439 323232 0.8 11 5 filename
where filename can be any file you want.  
For all these runs you will use the TestHash program as written.  

What are the hashtable statistics for each of the runs?  

Answer:
Run9
Hashtable statistics: 
  current table size: 47
  # items in table: 439
  current load factor: 9.340425531914894
  longest chain length: 17
  # 0-length chains: 0
  avg (non=0) chain length: 9.340425531914894

Run10
Hashtable statistics: 
  current table size: 383
  # items in table: 439
  current load factor: 1.1462140992167102
  longest chain length: 6
  # 0-length chains: 128
  avg (non=0) chain length: 1.7215686274509805

Run11
Hashtable statistics: 
  current table size: 767
  # items in table: 439
  current load factor: 0.5723598435462842
  longest chain length: 4
  # 0-length chains: 429
  avg (non=0) chain length: 1.2988165680473374

Run12
Hashtable statistics: 
  current table size: 767
  # items in table: 439
  current load factor: 0.5723598435462842
  longest chain length: 4
  # 0-length chains: 429
  avg (non=0) chain length: 1.2988165680473374


7) Briefly analyze your results from questions 4, 5, and 6.  Your analysis 
should consider the following (in relation to the final distribution of the 
hashtable):
    - the characteristics of the table size (i.e., prime or non-prime)
    - the characteristics of the input data 
    - the load factor (i.e., is the hashtable resized or not?)
    - the maximum chain length (i.e., whether or not there is a max)
and describe how they are related.

Answer:
Smaller maximum load factor results in much larger table sizes and a great deal more 0-length chains. This makes sense since a smaller max load factor means that we have to resize the table more frequently. Since we have the same number of elements as when using a larger load factor, we will have to have a larger number of empty spaces in the hash table.
Table size has a drastic impact on the max chain length and the average chain length, especially when combined with a lower load factor. When using a prime table size (such run 3 vs run 4) we saw a gigantic improvement in distribution where we went from 21 zero-length chains with a non-prime number to 0 zero-length chains with a prime table size.
Random numbers tend to lead to more balanced tables whereas the specific integers tend to clump together and create strange distributions. For example, run 3 created chains of identical size but only at every 3 positions so it's not well balanced. Run 8 created another strange distribution of alternating betwen the integer entered and an initially negative hash value (then adjusted by the table size). This ended up creating chains of all length 0 but more than half the table was empty resulting in a very poor distribution.
At larger load factors, adding a max chain length greatly decreased the quality of the distribution where we ended up about 1/3 of the table empty when adding a max length compared to using the whole table when not using a max length. Obviously adding a max length also will decrease your average chain length since it is capped. This results in a larger table size and generally leaves you open to more zero-length chains and unused space.

Overall, to get the smallest, most balanced hash tables, you want prime table sizes, larger load factors, no limits on the max chain size, and generally random values entered into the table.